System.Settings:
notifications_use_ring_volume ---+--> ze by na odlinkovanie zvonenia a notifikacii?
unlink_volumes_together ---------+
mute_streams_affected
mode_ringer_streams_affected

System.Global:
heads_up_notifications_enabled


Ako disablovat lockscreen, 2 kroky:
1. nastavit, ze power tlacitko nema lockovat
  /data/system/locksettings.db - lockscreen.power_button_instantly_locks (0,1)
  len je otazka, ci toto existuje aj na starsich androidoch ako 5.0
2. nastavit lockscreen timeout 
  Settings.Secure - lock_screen_lock_after_timeout (milisekundy)


--------

4. sprav notifikaciu ako dasboard, kde budu ikony profilov, klikom na ikonu sa profil aktivuje.
   poradie bude take iste ako pro aktivatore. Ak sa nezmestia na jednu notifikaciu, spravit dalsiu.
   Notifikacia bude mat prioritu nastavitelnu, default bude Minimal. Uzivatel si bude moct zmenit, aby sa
   takat notifikacia zobrazila aj v lockscreene. ;-)

--------

---------- PIN/password

1. ako zrusim pin/heslo

deviceManager.setPasswordMinimumLength(compName, 0);
boolean result = deviceManager.resetPassword("", DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);

2. ako nahodim pin/heslo

DevicePolicyManager deviceManager = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
ComponentName compName = new ComponentName(MessageService.this, LockAdmin.class);  

boolean active = deviceManager.isAdminActive(compName);  

if (active) { 
  deviceManager.setPasswordQuality(compName,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
  deviceManager.setPasswordMinimumLength(compName, 5);

  boolean result = deviceManager.resetPassword("blablabla", DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);
}

3. password quality:

DevicePolicyManager.PASSWORD_QUALITY_SOMETHING - pattern lock?
DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK - tvar, odtlacok prstu?
DevicePolicyManager.PASSWORD_QUALITY_NUMERIC - pin?
DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC - heslo?
DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC - heslo?
DevicePolicyManager.PASSWORD_QUALITY_COMPLEX - heslo?

--------------------------------

NFC tag senzor - NEFUNGUJE PRI CITANI TAGU NA POZADI!

Tu mas ako sa to id cita: https://gist.github.com/luixal/5768921.

- Sprav aby to len citalo UID a to pouzivaj na identifikaciu tagu.
  Takto precitas UID: https://gist.github.com/luixal/5768921
- Na nacitanie tagu v NFCTagPreference sa vytvori nova aktivita NFCTagReadEditorActivity.
  Ta bude normalna ako je teraz NFCTagWritreActivity, ktoru zahodim.
  Zobrazovat bude precitane UID tagu a aj jeho obsah.
  Aj citanie by malo zacat automaticky, ked prilozim tag ku mobilu.
- Pridanie tagu nech hned vyvola citanie UID
- Write to tag polozku menu tagu zrus a zamen za citanir UID tagu
- Premenovanie tagu teraz je nahovno, nespravi aj zapis dso tagu, ale po novom to bude OK ako to je.
- V tabulke TABLE_NFC_TAGS pribudne polozka KEY_NT_UID = "uid". Tam sa zapise precitane uid.
- Aby bola spatna kompatibilita so starymi tagmi, bude NFCTagReadActivity citat uid aj obsah tagu.
  Ak bude uid v tabulke KEY_NT_UID prazdne, pouzije sa ako teraz obsah tagu. Inac sa pouzije uid tagu.
- Pre NFCTagReadActivity zmenit v manifeste intent filter na tento:
    <intent-filter>
        <action android:name="android.nfc.action.TAG_DISCOVERED"/>
        <category android:name="android.intent.category.DEFAULT"/>
      </intent-filter>

---------------------------------------

Custom ikony - ako ich generovat:
- Prilis dlho to trva, cize treba ich generovat v samostanom threade. Najlepsie v AsyncTask, aby vygenerovane sa dalo lahko pouzit.
- Sprav na to Cache class.
- Generuj len jednu ikonu naraz. Generovanie nech je v samostanom threade.
- Kazde generovanie a pouzivanie lockuj mutexom.
- V Cache si pamataj URI ikony, z ktorej ikona je a toto aj pouzi ako identifikator, nech su ikony v Cache neduplikovane.

---------------------------------------

Permissions:
- Treba pre kazdy profil a kazdu udalost robit zvlast grant.
- Ak sa ma len generovat notifikacia tak tu vytvarat priamo v grantXXX metodach, ktore naplnim extras ako naplnam grant aktivitu.
- Grant notifikacia musi byt zvlast pre kazdy profil a udalost. Cize rozlisovat notifikacie cez request code, pouzit id profilu a zaporne id udalosti.

- Permissions
  profile._vibrationOnTouch != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_VIBRATION_ON_TOUCH, permission.WRITE_SETTINGS));
  profile._soundRingtoneChange != 0,
  profile._soundNotificationChange != 0,
  profile._soundAlarmChange != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_RINGTONES, permission.WRITE_SETTINGS));
    permissions.add(new PermissionType(PERMISSION_PROFILE_RINGTONES, permission.READ_EXTERNAL_STORAGE));
  profile.getDeviceBrightnessChange() ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_SCREEN_BRIGHTNESS, permission.WRITE_SETTINGS));
    permissions.add(new PermissionType(PERMISSION_PROFILE_SCREEN_BRIGHTNESS, permission.SYSTEM_ALERT_WINDOW));
  profile._deviceScreenTimeout != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_SCREEN_TIMEOUT, permission.WRITE_SETTINGS));
    permissions.add(new PermissionType(PERMISSION_PROFILE_SCREEN_TIMEOUT, permission.SYSTEM_ALERT_WINDOW));
  profile._deviceAutoRotate != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_AUTOROTATION, permission.WRITE_SETTINGS));
  profile._deviceWallpaperChange != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_WALLPAPER, permission.READ_EXTERNAL_STORAGE));
  profile._deviceWiFiAP  != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_RADIO_PREFERENCES, permission.WRITE_SETTINGS));
  profile._deviceMobileData != 0,
  profile._deviceNetworkType != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_RADIO_PREFERENCES, permission.READ_PHONE_STATE));
  !profile._deviceConnectToSSID.equals(Profile.CONNECTTOSSID_JUSTANY)->
    permissions.add(new PermissionType(PERMISSION_PROFILE_RADIO_PREFERENCES, permission.ACCESS_COARSE_LOCATION));
    permissions.add(new PermissionType(PERMISSION_PROFILE_RADIO_PREFERENCES, permission.ACCESS_FINE_LOCATION));
  profile._volumeSpeakerPhone != 0 (speaker phone can be enabled/disabled only during call) ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_SPEAKER_PHONE_BROADCAST, permission.READ_PHONE_STATE));
    permissions.add(new PermissionType(PERMISSION_PROFILE_SPEAKER_PHONE_BROADCAST, permission.PROCESS_OUTGOING_CALLS));
  !_profile.getIsIconResourceID() (for show custom profile icon) ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_CUSTOM_PROFILE_ICON, permission.READ_EXTERNAL_STORAGE));
  profile._notificationLed  != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_NOTIFICATION_LED, permission.WRITE_SETTINGS));
  profile._vibrateWhenRinging != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_VIBRATE_WHEN_RINGING, permission.WRITE_SETTINGS));
  profile._volumeRingerMode != 0,
  profile.getVolumeRingtoneChange(),
  profile.getVolumeNotificationChange(),
  profile.getVolumeSystemChange() ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_ACCESS_NOTIFICATION_POLICY, permission.ACCESS_NOTIFICATION_POLICY));
  profile._lockDevice == 1 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_LOCK_DEVICE, permission.WRITE_SETTINGS));
    permissions.add(new PermissionType(PERMISSION_PROFILE_LOCK_DEVICE, permission.SYSTEM_ALERT_WINDOW));
  profile._dtmfToneWhenDialing != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_DTMF_TONE_WHEN_DIALING, permission.WRITE_SETTINGS));
  profile._soundOnTouch != 0 ->
    permissions.add(new PermissionType(PERMISSION_PROFILE_SOUND_ON_TOUCH, permission.WRITE_SETTINGS));

  event._eventPreferencesCalendar._enabled ->
    permissions.add(new PermissionType(PERMISSION_EVENT_CALENDAR_PREFERENCES, permission.READ_CALENDAR));
  event._eventPreferencesCall._enabled ->
    permissions.add(new PermissionType(PERMISSION_EVENT_CALL_PREFERENCES, permission.READ_CONTACTS));
  event._eventPreferencesCall._enabled ->
    permissions.add(new PermissionType(PERMISSION_EVENT_CALL_PREFERENCES, permission.READ_PHONE_STATE));
    permissions.add(new PermissionType(PERMISSION_EVENT_CALL_PREFERENCES, permission.PROCESS_OUTGOING_CALLS));
  event._eventPreferencesOrientation._enabled (for ignoring orientation change during call) ->
    permissions.add(new PermissionType(PERMISSION_EVENT_ORIENTATION_PREFERENCES, permission.READ_PHONE_STATE));
    permissions.add(new PermissionType(PERMISSION_EVENT_ORIENTATION_PREFERENCES, permission.PROCESS_OUTGOING_CALLS));
  event._eventPreferencesSMS._enabled ->
    permissions.add(new PermissionType(PERMISSION_EVENT_SMS_PREFERENCES, permission.RECEIVE_SMS));
    permissions.add(new PermissionType(PERMISSION_EVENT_SMS_PREFERENCES, permission.READ_SMS));
    permissions.add(new PermissionType(PERMISSION_EVENT_SMS_PREFERENCES, permission.RECEIVE_MMS));
    permissions.add(new PermissionType(PERMISSION_EVENT_SMS_PREFERENCES, permission.READ_CONTACTS));
  event._eventPreferencesWifi._enabled && event._eventPreferencesWifi._connectionType == infront (nearby) types ->
    permissions.add(new PermissionType(PERMISSION_EVENT_WIFI_PREFERENCES, permission.ACCESS_COARSE_LOCATION));
    permissions.add(new PermissionType(PERMISSION_EVENT_WIFI_PREFERENCES, permission.ACCESS_FINE_LOCATION));
  event._eventPreferencesBluetooth._enabled && event._eventPreferencesBluetooth._connectionType == infront (nearby) types ->
    permissions.add(new PermissionType(PERMISSION_EVENT_BLUETOOTH_PREFERENCES, permission.ACCESS_COARSE_LOCATION));
    permissions.add(new PermissionType(PERMISSION_EVENT_BLUETOOTH_PREFERENCES, permission.ACCESS_FINE_LOCATION));
  event._eventPreferencesLocation._enabled ->
    permissions.add(new PermissionType(PERMISSION_EVENT_LOCATION_PREFERENCES, permission.ACCESS_COARSE_LOCATION));
    permissions.add(new PermissionType(PERMISSION_EVENT_LOCATION_PREFERENCES, permission.ACCESS_FINE_LOCATION));
  event._eventPreferencesMobileCells._enabled ->
    permissions.add(new PermissionType(PERMISSION_EVENT_MOBILE_CELLS_PREFERENCES, permission.ACCESS_COARSE_LOCATION));
    permissions.add(new PermissionType(PERMISSION_EVENT_MOBILE_CELLS_PREFERENCES, permission.ACCESS_FINE_LOCATION));

  install PhoneProfiles Silent tone ->
    permissions.add(new Permissions.PermissionType(Permissions.PERMISSION_INSTALL_TONE, Manifest.permission.WRITE_EXTERNAL_STORAGE));
  backup PPP data ->
    permissions.add(new PermissionType(PERMISSION_EXPORT, permission.WRITE_EXTERNAL_STORAGE));
  restore PPP data ->
    permissions.add(new PermissionType(PERMISSION_IMPORT, permission.READ_EXTERNAL_STORAGE));
  play ringtone and notification sound (ringing call simulation, notification) ->
    permissions.add(new Permissions.PermissionType(Permissions.PERMISSION_PLAY_RINGTONE_NOTIFICATION, Manifest.permission.READ_EXTERNAL_STORAGE));
  play ringtone sound (ringing call simulation) ->
    permissions.add(new Permissions.PermissionType(Permissions.PERMISSION_PLAY_RINGTONE_NOTIFICATION, Manifest.permission.READ_CONTACTS));

  ringtone dialog preference ->
    permissions.add(new PermissionType(PERMISSION_RINGTONE_PREFERENCE, permission.READ_EXTERNAL_STORAGE));
  brightness dialog preference ->
    permissions.add(new PermissionType(PERMISSION_BRIGHTNESS_PREFERENCE, permission.WRITE_SETTINGS));
    permissions.add(new PermissionType(PERMISSION_BRIGHTNESS_PREFERENCE, permission.SYSTEM_ALERT_WINDOW));
  wallpaper dialog preference ->
    permissions.add(new PermissionType(PERMISSION_WALLPAPER_PREFERENCE, permission.READ_EXTERNAL_STORAGE));
  custom profile icon dialog preference ->
    permissions.add(new PermissionType(PERMISSION_CUSTOM_PROFILE_ICON, permission.READ_EXTERNAL_STORAGE));
  event calendar dialog preference ->
    permissions.add(new PermissionType(PERMISSION_CALENDAR_PREFERENCE, permission.READ_CALENDAR));
  event wi-fi dialog preference,
  event bluetooth dialog preference,
  event location editor activity,
  event mobile cells dialog preference ->
    permissions.add(new PermissionType(PERMISSION_LOCATION_PREFERENCE, permission.ACCESS_COARSE_LOCATION));
    permissions.add(new PermissionType(PERMISSION_LOCATION_PREFERENCE, permission.ACCESS_FINE_LOCATION));
  event contact groups dialog preference,
  event contacts dialog preference ->
    permissions.add(new PermissionType(PERMISSION_EVENT_CONTACTS_PREFERENCE, permission.READ_CONTACTS));

----------------

Restart udalosti:

DataWrapper.restartEvents()
- ActionForExternalApplicationActivity
- EditorEventListFragment.runStopEvent()
- EditorEventListFragment.deleteEvent()
- EditorProfileListFragment.deleteProfile()
- EditorPreferencesActivity.savePreferences()
- PhoneProfilesService.onStartCommand() - EXTRA_RESTART_EVENTS - ak uzivatel zmeni parameter Settings->System->Use alarm clock
- PostDelayedProadcastReceiver - ACTION_RESTART_EVENTS - pre DataWrapper.restartEventsWithDelay()
- ProfilePreferenceActivity.savePreferences()
- TimeChangedReceiver - ACTION_TIMEZONE_CHANGED,
                        ACTION_TIME_CHANGED -- toto moze byt problem!!!

------------------

Vyhodenie SMS a Call permissions

1. PhoneProfiles
- android.permission.PROCESS_OUTGOING_CALLS - vyhodene, nie je treba pre unlink volumes
- Cize PhoneProfiles je OK

2. PhoneProfilesPlus
- android.permission.READ_SMS - vyhodene, nie je treba, od koho je sms je v intent bundle receiveru, obsah sms/mms necitam.
- android.permission.RECEIVE_SMS - treba vyhodit z GooglePlay PPP, dat to do PPPE je problem,
                                    vyzaduje si to foreground servis na pozadi a teda aj dalsia notifikacia :-/.
- android.permission.RECEIVE_MMS - treba vyhodit z GooglePlay PPP, dat to do PPPE je problem,
                                    vyzaduje si to foreground servis na pozadi a teda aj dalsia notifikacia :-/.
- android.permission.PROCESS_OUTGOING_CALLS - vyhodene, nie je treba pre unlink volumes a event Call senzor.


---------------------

PhoneProfilesPlus - Applikacne nastavenia - popis v hlavnej obrazovke:
1. Application interface -> Language; Application theme; ...
2. Application start -> Start on phone boot: ON, Activate profile on startup: ON, Start events on startup: ON, ...
3. System -> Unlink ringer and notification volume: ON/OFF/Not linked, Set volume link: Volumes not linked; Battery optimization, Power manager, Power save mode settings: Use Battery saver, Battery saver; ...
4. Permissions -> Grant Root: granted; Modify system settings: granted; Do not dusturb access: granted, Draw over apps: granted; Application permissions: Contacts, Location, Telephone, Storage
5. Notifications:
   - Android 8+ -> Show toast notification: ON; Notification icon style: Native; Show preferences indicator: ON; Text color: Do not change; ...
   - Android < 8 -> Show toast notification: ON; Show status bar notification: ON; Ongoing notification: ON; Notification icon style: Native; Show preferences indicator: ON; Text color: Do not change; ...
6. Profile activation -> Default profile: Vonku; Default profile usage: OFF; Confirm activating profile: ON; ...
7. Run event -> Use "Priority" event parameter: ON; Confirm restart events: ON; ...
8. Location scanning -> Disabled; Location editor; Location scan interval: 15 minutes; ...
9. Wi-Fi scanning -> Enabled; Scan even if Wi-Fi is disabled: ON; Wi-Fi scan interval: 15 minutes; ...
10. Bluetooth scanning -> Disabled; Scan even if Bluetooth is disabled: ON; Bluetooth scan interval: 15 minutes; Bluetooth LE interval: 10 seconds; ...
11. Mobile cells scanning -> Disabled; ...
12. Orientation scanning -> Disabled; Orientation scan interval: 10 seconds; ...
13. Activator -> Preferences indicator: ON; Show activated profile: ON; Close after activating profile: ON; Grid layout: ON; ...
14. Editor -> Preferences indicator: ON; Show activated profile: ON; Save editor state: ON; Delete old Activity logs: 7 days; ...
15. Widget: List -> Preferences indicator: ON; Show activated profile: ON; Grid layout: ON; Color background type: OFF; Show border: ON; Rounded corners: ON; Icon color type: Colorful; ...
16. Widget: Single row -> Preferences indicator: ON; Color background type: OFF; Show border: ON; Rounded corners: ON; Icon color type: Colorful; ...
17. Widget: Icon; Shortcut -> Color background type: ON; Show border: OFF; Rounded corners: ON; Hide profile name: OFF; Icon color type: Colorful; ...
18. Samsung edge panel -> Show activated profile: ON; Color background type: OFF; Icon color type: Colorful; ...

----------------------

Brightness in Pie

https://android.googlesource.com/platform/frameworks/base/+/master/packages/SettingsLib/src/com/android/settingslib/display/BrightnessUtils.java
https://android.googlesource.com/platform/frameworks/base/+/master/packages/SystemUI/src/com/android/systemui/settings/BrightnessController.java

public static final int GAMMA_SPACE_MAX = 1023;

// returns value from 0 to 1
private double getCurrentBrightness() {
        final int mMinBrightness = 0;
        final int mMaxBrightness = 255;

        final int value;

        value = convertLinearToGamma(Settings.System.getInt(mContentResolver,
                System.SCREEN_BRIGHTNESS, mMinBrightness),
                mMinBrightness, mMaxBrightness);

        return getPercentage(value, 0, GAMMA_SPACE_MAX);
    }

private double getPercentage(double value, int min, int max) {
        if (value > max) {
            return 1.0;
        }
        if (value < min) {
            return 0.0;
        }
        return (value - min) / (max - min);
    }

private void setCurrentBrightness(double value) {
    final int mMinBrightness = 0;
    final int mMaxBrightness = 255;

    final int val = convertGammaToLinear(value, mMinBrightness, mMaxBrightness);

    Settings.System.putInt(mContext.getContentResolver(), System.SCREEN_BRIGHTNESS, val);
}

// Hybrid Log Gamma constant values
private static final float R = 0.5f;
private static final float A = 0.17883277f;
private static final float B = 0.28466892f;
private static final float C = 0.55991073f;

public static final int convertLinearToGamma(int val, int min, int max) {
        // For some reason, HLG normalizes to the range [0, 12] rather than [0, 1]
        final float normalizedVal = MathUtils.norm(min, max, val) * 12;
        final float ret;
        if (normalizedVal <= 1f) {
            ret = MathUtils.sqrt(normalizedVal) * R;
        } else {
            ret = A * MathUtils.log(normalizedVal - B) + C;
        }
        return Math.round(MathUtils.lerp(0, GAMMA_SPACE_MAX, ret));
    }

public static final int convertGammaToLinear(int val, int min, int max) {
        final float normalizedVal = MathUtils.norm(0, GAMMA_SPACE_MAX, val);
        final float ret;
        if (normalizedVal <= R) {
            ret = MathUtils.sq(normalizedVal / R);
        } else {
            ret = MathUtils.exp((normalizedVal - C) / A) + B;
        }
        // HLG is normalized to the range [0, 12], so we need to re-normalize to the range [0, 1]
        // in order to derive the correct setting value.
        return Math.round(MathUtils.lerp(min, max, ret / 12));
    }

-----------------------------------

Android Pie support:
- Musis testnut "Call sensor". Ci budes dostavat telefonne cislo. Testni na Nexus5x.

- Musis nastavit compileSDK=28 a classpath 'com.android.tools.build:gradle:3.2.1'.
  Potom to uz bude padat len na nepodpore zo strany android-hidden-api. Cize treba cakat. :-(
- Ostatne veci mas v Keep.

-----------------------------------

Oranzove senzory:

Co ak restartne service a ziadne extras nie su nastavene?

 - nastavi sa toto:
        instance = this;
        serviceHasFirstStart = false;
        serviceRunning = false;
        runningInForeground = false;

- neviem vobec ci onStartCommand sa spusti, ale predpokladajme, ze ano:
  - doForFirstStart sa spusti
  - intent asi bude prazdny
  - toto zostane nezmenene:
        boolean onlyStart = true;
        boolean initializeStart = false;
        boolean startOnBoot = false;
        boolean startOnPackageReplace = false;
  - toto sa vykona, ak sa zisti, ze je nova verzia:
        if ((!startOnPackageReplace) && PPApplication.isNewVersion(getApplicationContext())) {
            PPApplication.logE("PhoneProfilesService.doForFirstStart", "is new version but not EXTRA_START_ON_PACKAGE_REPLACE");
            PPApplication.logE("PhoneProfilesService.doForFirstStart", "PhoneProfilesService.doForFirstStart END");
            return true;
        }
    cize skonci doFirstStart, lebo sa caka na PackageReplacedReceiver. Ten zapisuje novu verziu.
    No ale v takom pripade predsa uz service bezi, podla mna treba v PackageReplacedReceiver servis stopnut. Radsej vzdy. - HOTOVO
  - ak nie je nova verzia, pokracuje dalej:
        serviceRunning = true;
  - nahodia sa receivre a joby - nebudu fungovat sa, ak nebezi servis alebo serviceHasFirstStart = false
  - restartnu sa udalosti - nespravi sa vobec nic, ziadna udalosti ani restart, ak nebezi servis alebo serviceHasFirstStart = false
               v EventsHandler je totizto na zaciatku handleEvent toto:
                    if (!PPApplication.getApplicationStarted(context, true))
                        // application is not started
                        return;
               Cize testuje sa, ci bezi servis a ci ma serviceHasFirstStart = true
               (serviceHasFirstStart = true; som presunul a restart udalosti som dal bez pouzitia handlera)

  - vysledok je, ze sa vlastne len nahodia receivre a joby, spravi sa restart udalosti lebo:
        instance = this;
        serviceHasFirstStart = true;
        serviceRunning = true;
    Udalosti musia normalne bezat, lebo vsetko je pre to spravne nastavene, oranzove senzory nemozu zostat.

- ak sa onStartCommand nespusti, ale neverim, ze je to ono, toto by znamenalo uplne spatne upravene volanie servisov v niektorych mobiloch
  napr. v Xiaomi sa im stali oranzove senzory:

 - nastavi sa toto:
        instance = this;
        serviceHasFirstStart = false;
        serviceRunning = false;
        runningInForeground = false;

 - vysledok je ze bobec nic nebezi. Oranzove senzory sa nastavia, bud z doFirstStart (nie je tento pripad, nespusti sa)
   alebo ak uzivatel zastavi a znova spusti beh udalosti. Cize toto je jediny kedy mozu zostat oranzove.
   Lebo servis sa nespustil korektne.

Cize, ake su oranzove senzory a ani restart udalosti nefunguje, bud nebezi servis, alebo nebola nastavena serviceHasFirstStart.
Kukni teda, kedy sa toto moze stat. Restart samotneho servisu to nie je. Vtedy sa oboje nastavi.

Vyhodil som kill procesu z exitApp. Toto by mohlo sposobit problemy, ze sa nestihne vykonat onDestroy servisu.
Pri obnove zalohy kill nerobim a vsetko sa spustilo, oranzove senzory neboli.
