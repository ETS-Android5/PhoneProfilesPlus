System.Settings:
notifications_use_ring_volume ---+--> ze by na odlinkovanie zvonenia a notifikacii?
unlink_volumes_together ---------+
mute_streams_affected
mode_ringer_streams_affected

System.Global:
heads_up_notifications_enabled


Ako disablovat lockscreen, 2 kroky:
1. nastavit, ze power tlacitko nema lockovat
  /data/system/locksettings.db - lockscreen.power_button_instantly_locks (0,1)
  len je otazka, ci toto existuje aj na starsich androidoch ako 5.0
2. nastavit lockscreen timeout 
  Settings.Secure - lock_screen_lock_after_timeout (milisekundy)


povolenie/zakazanie vybrovania pri dotyku: Settings.System.HAPTIC_FEEDBACK_ENABLED (0,1)


---- Power management:

1. Ak je device v "Device Idle" mode, podla dokumentacie nerobi wifi scanning.
2. Pocas "device idle" nerobit scanning, odchytavat broadcast na zmenu modu a ak sa
   "Device Idle" vypne, zavolat EventsService (akoby to bol typ udalosti).
3. Aplikacia sa moze dostat do "App Standby" modu. Treba zistit, ako sa toto da odchytit. Ak bude v tomto mode,
   scannovat s intervalom raz tak dlhym ako je prednastavene. Ak sa vypne tento mod, spravit one scan.
4. Od Lollipopa existuje "Power Save" mod. Da sa odchytit boradcast. Mal by fungovat tak ako pri
   "App standby" mode.

--------

1. scanning - ak bezi, a dam spustit one shot scanning z preferences, neukoncit hned, ale cakat na
   ukoncenie beziaceho
2. sprav udalost na start aplikacie
3. skus spravit do profilu moznot zastavit aplikaciu
4. sprav notifikaciu ako dasboard, kde budu ikony profilov, klikom na ikonu sa profil aktivuje.
   poradie bude take iste ako pro aktivatore. Ak sa nezmestia na jednu notifikaciu, spravit dalsiu.
   Notifikacia bude mat prioritu nastavitelnu, default bude Minimal. Uzivatel si bude moct zmenit, aby sa
   takat notifikacia zobrazila aj v lockscreene. ;-)

--------

---------- PIN/password

1. ako zrusim pin/heslo

deviceManager.setPasswordMinimumLength(compName, 0);
boolean result = deviceManager.resetPassword("", DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);

2. ako nahodim pin/heslo

DevicePolicyManager deviceManager = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
ComponentName compName = new ComponentName(MessageService.this, LockAdmin.class);  

boolean active = deviceManager.isAdminActive(compName);  

if (active) { 
  deviceManager.setPasswordQuality(compName,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
  deviceManager.setPasswordMinimumLength(compName, 5);

  boolean result = deviceManager.resetPassword("blablabla", DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);
}

3. password quality:

DevicePolicyManager.PASSWORD_QUALITY_SOMETHING - pattern lock?
DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK - tvar, odtlacok prstu?
DevicePolicyManager.PASSWORD_QUALITY_NUMERIC - pin?
DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC - heslo?
DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC - heslo?
DevicePolicyManager.PASSWORD_QUALITY_COMPLEX - heslo?

--------------------------------

Alarmy a wakeupy:

1. Wi-fi, Bluetooth scanning

- Pouziva sa ScannerService. Je to sice IntentService, ale nie je volany cez WakefulBroadcastReceiver.
- V ScannerService riesim wakeupy cez PowerManagera. Toto chem prerobit pouzitim WakefulBroadcastReceiver.
- Wi-fi scanning - co vsetko sa vola:
  1) WifiScanAlarmBroadcastReceiver - je volany cez AlarmManager s RTC_WAKEUP. Toto necham tak.
  2) WifiScanAlarmBroadcastReceiver.lock() - robi wifiLock. Toto musim volat, necham to ako je.
  3) Samotny scan: zavola WifiStateChangedBroadcastReceiver - ak scanner zapina wifi - je to WakefulBroadcastReceiver lebo vola aj EventsService.
  4) WifiStateChangedBroadcastReceiver - ten zacina skenovanie, ale cez Handler, nie cez alarm - TOTO POUZIT AJ INDE PRI PAR SEKUNDOVYCH ALARMOCH
  5) Vysledok skenovania je idikovany zavolanim WifiScanBroadcastReceiver. Ten nie je v manifeste, je registrovany v ScannerService.
  6) WifiScanBroadcastReceiver - ten ma zavolat EventsService. Zavola ho cez RTC_WAKEUP alarm (StartEventsServiceBroadcastReceiver).
        Prerobit cez Handler - ako je to v WifiStateChangedBroadcastReceiver - spravit sendBroadcast po 5 sekundach.
  7) StartEventsServiceBroadcastReceiver - je to WakefulBroadcastReceiver - vola EventsService.
- Bluetooth scanning - co vsetko vola:
  1) BluetoothScanAlarmBroadcastReceiver - je volany cez AlarmManager s RTC_WAKEUP. Toto necham tak.
  2) BluetoothScanAlarmBroadcastReceiver - nema ziaden lock().
  3) Samotny scan: zavola BluetoothStateChangedBroadcastReceiver - ak scanner zapina bluetooth - je to WakefulBroadcastReceiver lebo vola aj EventsService.
  4) BluetoothStateChangedBroadcastReceiver - ten zacina skenovanie. Ziaden Handler, priamo.
  5) Typ skenovania - klasicky:
     5a) Vysledok skenovania je idikovany zavolanim BluetoothScanBroadcastReceiver. Ten nie je v manifeste, je registrovany v ScannerService.
     5b) BluetoothScanBroadcastReceiver - ten ma zavolat EventsService. Zavola ho cez RTC_WAKEUP alarm (StartEventsServiceBroadcastReceiver).
             Prerobit cez Handler - ako je to v WifiStateChangedBroadcastReceiver - spravit sendBroadcast po 5 sekundach.
  6) Typ skenovania - LE:
     6a) Konfiguruju sa callbacky: BluetoothLEScanCallback21 alebo BluetoothLEScanCallback18 - tie iba naplnaju data.
     6b) Vysledok skenovania je idikovany zavolanim - BluetoothLEScanBroadcastReceiver - toto je LocalBroadcastReceiver, registrovany v ScannerService.
     6c) BluetoothLEScanBroadcastReceiver - je sendnuty z ScannerService po ukonceni cakania na LE skenovanie.
     6d) BluetoothLEScanBroadcastReceiver - ten ma zavolat EventsService. Zavola ho cez RTC_WAKEUP alarm (StartEventsServiceBroadcastReceiver).
             Prerobit cez Handler - ako je to v WifiStateChangedBroadcastReceiver - spravit sendBroadcast po 5 sekundach.
  7) StartEventsServiceBroadcastReceiver - je to WakefulBroadcastReceiver - vola EventsService.
- ScannerService - je to IntentService, ktory je volany z:
  1) BluetoothScanAlarmBroadcastReceiver.startScanner(). Toto je volane z:
     1a) BluetoothScanAlarmBroadcastReceiver.onReceive().
     1b) BluetoothNamePreference.refreshListView().
  2) WifiScanAlarmBroadcastReceiver.startScanner(). Toto je volane z:
     2a) WifiScanAlarmBroadcastReceiver.onReceive().
     2b) WifiSSIDPreference.refreshListView().
- StartEventsServiceBroadcastReceiver - pouzite v:
  1) BluetoothLEScanBroadcastReceiver.setAlarm(), removeAlarm().
  2) BluetoothScanBroadcastReceiver.setAlarm(), removeAlarm().
  3) DataWrapper.restartEvents()
  4) ScreenOnOffService.onHandleIntent()
  5) WifiScanBroadcastReceiver.setAlarm(), removeAlarm().